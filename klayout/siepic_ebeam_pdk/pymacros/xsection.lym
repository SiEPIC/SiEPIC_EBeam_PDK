<?xml version="1.0" encoding="utf-8"?>
<klayout-macro>
 <description>Cross section generator</description>
 <version/>
 <category/>
 <prolog/>
 <epilog/>
 <doc/>
 <autorun>true</autorun>
 <autorun-early>false</autorun-early>
 <shortcut/>
 <show-in-menu>false</show-in-menu>
 <group-name/>
 <menu-path/>
 <interpreter>ruby</interpreter>
 <dsl-interpreter-name/>
 <text>#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# A feasibility study for a cross section generation using
# boolean operations. See "cmos.xs" for a brief description of the
# commands available and some examples.

# TODO: the left and right areas are not treated correctly
# TODO: structures vanish for big taper angles
# TODO: gaps and slivers for round grow on round substrate for example
# TODO: Deposition does not follow the substrate surface
# TODO: taper parameters are not consistent (how do xy and taper angle interact?)

# ----------------------------------------------------------------------------

# @brief An enhancement to the Edge processor
# Empty polyon arrays produce errors with boolean_to_polygon because
# RBA does not recognize the empty array as an array of polygons and then there is
# an ambiguity between the edge-input and polygon input variants
# Thus this extension which checks for empty input and performs some default operation:
class RBA::EdgeProcessor
  def safe_boolean_to_polygon(pa, pb, mode, rh, mc)
    if pa.length &gt; 0 &amp;&amp; pb.length &gt; 0
      return self.boolean_to_polygon(pa, pb, mode, rh, mc)
    elsif mode == RBA::EdgeProcessor::mode_and
      return []
    elsif mode == RBA::EdgeProcessor::mode_or
      if pa.length &gt; 0
        return pa
      else
        return pb
      end
    elsif mode == RBA::EdgeProcessor::mode_xor
      if pa.length &gt; 0
        return pa
      else
        return pb
      end
    elsif mode == RBA::EdgeProcessor::mode_anotb
      return pa
    elsif mode == RBA::EdgeProcessor::mode_bnota
      return pb
    else
      return []
    end
  end
end

def string_to_layerinfo(layer_spec)

  # convert the layer specification into a LayerInfo structure
  # format: "l", "l/d", "n(l/d)" or "n".
  ls = nil
  if (layer_spec =~ /^(\d+)$/)
    ls = RBA::LayerInfo.new($1.to_i, 0)
  elsif (layer_spec =~ /^(\d+)\/(\d+)$/)
    ls = RBA::LayerInfo.new($1.to_i, $2.to_i)
  elsif (layer_spec =~ /^(.*)\s*\((\d+)\/(\d+)\)$/)
    ls = RBA::LayerInfo.new($2.to_i, $3.to_i, $1)
  else
    ls = RBA::LayerInfo.new(layer_spec)
  end

  return ls

end

class LayoutData

  def initialize(polygons, xs)
    @polygons = polygons
    @ep = RBA::EdgeProcessor.new
    @xs = xs
  end

  def upcast(polygons)
    LayoutData.new(polygons, @xs)
  end

  def load(layout, cell, box, layer_spec)

    ls = string_to_layerinfo(layer_spec)

    # look up the layer
    layer_index = nil
    layout.layer_indices.each do |li|
      if (layout.get_info(li).is_equivalent?(ls))
        layer_index = li
      end
    end

    # collect polygons from the specified layer
    if (layer_index)

      shape_iter = layout.begin_shapes_touching(cell, layer_index, box)
      while !shape_iter.at_end

        shape = shape_iter.shape
        if shape.is_polygon? || shape.is_path? || shape.is_box?
          @polygons.push(shape.polygon.transformed_cplx(shape_iter.itrans))
        end

        shape_iter.next

      end

    end

  end

  def data
    @polygons
  end

  def data=(polygons)
    @polygons = polygons
  end

  def sized(*args)
    if args.length == 1
      upcast(@ep.size_to_polygon(@polygons, (args[0] / @xs.dbu + 0.5).floor.to_i, 2, true, true))
    elsif args.length == 2
      upcast(@ep.size_to_polygon(@polygons, (args[0] / @xs.dbu + 0.5).floor.to_i, (args[1] / @xs.dbu + 0.5).floor.to_i, 2, true, true))
    else
      raise("sized method expects on or two arguments")
    end
  end

  def size(*args)
    if args.length == 1
      @polygons = @ep.size_to_polygon(@polygons, (args[0] / @xs.dbu + 0.5).floor.to_i, 2, true, true)
    elsif args.length == 2
      @polygons = @ep.size_to_polygon(@polygons, (args[0] / @xs.dbu + 0.5).floor.to_i, (args[1] / @xs.dbu + 0.5).floor.to_i, 2, true, true)
    else
      raise("size method expects on or two arguments")
    end
  end

  def invert
    @polygons = @ep.safe_boolean_to_polygon(@polygons, [RBA::Polygon.new(@xs.background)], RBA::EdgeProcessor::mode_xor, true, true)
  end

  def inverted
    upcast(@ep.safe_boolean_to_polygon(@polygons, [RBA::Polygon.new(@xs.background)], RBA::EdgeProcessor::mode_xor, true, true))
  end

  def or(other)
    raise "'or': argument is not a layer" unless other.kind_of?(LayoutData)
    upcast(@ep.safe_boolean_to_polygon(@polygons, other.data, RBA::EdgeProcessor::mode_or, true, true))
  end

  def orp(other)
    upcast(@ep.safe_boolean_to_polygon(@polygons, other, RBA::EdgeProcessor::mode_or, true, true))
  end

  def and(other)
    raise "'and': argument is not a layer" unless other.kind_of?(LayoutData)
    upcast(@ep.safe_boolean_to_polygon(@polygons, other.data, RBA::EdgeProcessor::mode_and, true, true))
  end

  def andp(other)
    upcast(@ep.safe_boolean_to_polygon(@polygons, other, RBA::EdgeProcessor::mode_and, true, true))
  end

  def xor(other)
    raise "'xor': argument is not a layer" unless other.kind_of?(LayoutData)
    upcast(@ep.safe_boolean_to_polygon(@polygons, other.data, RBA::EdgeProcessor::mode_xor, true, true))
  end

  def xorp(other)
    upcast(@ep.safe_boolean_to_polygon(@polygons, other, RBA::EdgeProcessor::mode_xor, true, true))
  end

  def not(other)
    raise "'not': argument is not a layer" unless other.kind_of?(LayoutData)
    upcast(@ep.safe_boolean_to_polygon(@polygons, other.data, RBA::EdgeProcessor::mode_anotb, true, true))
  end

  def notp(other)
    upcast(@ep.safe_boolean_to_polygon(@polygons, other, RBA::EdgeProcessor::mode_anotb, true, true))
  end

  def add(other)
    raise "'add': argument is not a layer" unless other.kind_of?(LayoutData)
    @polygons = @ep.safe_boolean_to_polygon(@polygons, other.data, RBA::EdgeProcessor::mode_or, true, true)
  end

  def addp(other)
    @polygons = @ep.safe_boolean_to_polygon(@polygons, other, RBA::EdgeProcessor::mode_or, true, true)
  end

  def sub(other)
    raise "'sub': argument is not a layer" unless other.kind_of?(LayoutData)
    @polygons = @ep.safe_boolean_to_polygon(@polygons, other.data, RBA::EdgeProcessor::mode_anotb, true, true)
  end

  def subp(other)
    @polygons = @ep.safe_boolean_to_polygon(@polygons, other, RBA::EdgeProcessor::mode_anotb, true, true)
  end

  def mask(other)
    raise "'mask': argument is not a layer" unless other.kind_of?(LayoutData)
    @polygons = @ep.safe_boolean_to_polygon(@polygons, other.data, RBA::EdgeProcessor::mode_and, true, true)
  end

  def maskp(other)
    @polygons = @ep.safe_boolean_to_polygon(@polygons, other, RBA::EdgeProcessor::mode_and, true, true)
  end

  def transform(t)
    @polygons = @polygons.collect { |p| p.transformed(t) }
  end

end

class MaskData &lt; LayoutData

  def initialize(air_polygons, mask_polygons, xs)
    super([], xs)
    @air_polygons = air_polygons
    @mask_polygons = mask_polygons
  end

  def upcast(polygons)
    MaskData.new(@air_polygons, polygons, @xs)
  end

  def grow(*args)

    # parse the arguments
    (xy, z, into, through, on, taper, bias, mode, buried) = parse_grow_etch_args(args, :grow)

    # produce the geometry of the new material
    d = produce_geom(xy, z, into, through, on, taper, bias, mode, buried, :grow)

    # prepare the result
    res = MaterialData.new(d, @xs)

    # consume material
    if into
      into.each do |i|
        i.sub(res)
      end
    else
      @xs.air.sub(res)
    end

    return res

  end

  def etch(*args)

    # parse the arguments
    (xy, z, into, through, on, taper, bias, mode, buried) = parse_grow_etch_args(args, :etch)

    if !into
      raise "'etch' method: requires an 'into' specification"
    end

    # prepare the result
    d = produce_geom(xy, z, into, through, on, taper, bias, mode, buried, :etch)

    # produce the geometry of the etched material
    res = MaterialData.new(d, @xs)

    # consume material and add to air
    if into
      into.each do |i|
        i.sub(res)
      end
    end

    @xs.air.add(res)

  end

  def parse_grow_etch_args(args, method)

    xy = nil
    z = nil
    into = nil
    through = nil
    on = nil
    taper = nil
    bias = nil
    buried = nil
    mode = :square

    args.each do |a|
      if a.kind_of?(Hash)
        a.each_pair do |k,v|
          if k == :into
            if !v.kind_of?(Array)
              into = [v]
            else
              into = v
            end
            into.each do |i|
              if !i.kind_of?(MaterialData) 
                raise "'#{method}' method: 'into' expects a material parameter or an array of such"
              end
            end
          elsif k == :on
            if !v.kind_of?(Array)
              on = [v]
            else
              on = v
            end
            on.each do |i|
              if !i.kind_of?(MaterialData) 
                raise "'#{method}' method: 'on' expects a material parameter or an array of such"
              end
            end
          elsif k == :through
            if !v.kind_of?(Array)
              through = [v]
            else
              through = v
            end
            through.each do |i|
              if !i.kind_of?(MaterialData) 
                raise "'#{method}' method: 'through' expects a material parameter or an array of such"
              end
            end
          elsif k == :mode
            mode = v
            if v != :round &amp;&amp; v != :square &amp;&amp; v != :octagon
              raise "'#{method}' method: 'mode' expects ':round', ':square' or ':octagon'"
            end
          elsif k == :buried
            buried = v.to_f
          elsif k == :taper
            taper = v.to_f
          elsif k == :bias
            bias = v.to_f
          else
            raise "'#{method}' method: undefined parameter key '#{k}'"
          end
        end
      elsif !z
        z = a.to_f
      elsif !xy
        xy = a.to_f
      else
        raise "Too many arguments for '#{method}' method"
      end
    end

    if !z
      raise "Too few arguments for '#{method}' method"
    end

    if on &amp;&amp; (through || into)
      raise "'on' option cannot be combined with 'into' or 'through' option"
    end

    [xy || 0.0, z, into, through, on, taper, bias, mode, buried]

  end

  def produce_geom(xy, z, into, through, on, taper, bias, mode, buried, method)

    prebias = bias || 0.0
    if xy &lt; 0.0
      xy = -xy
      prebias += xy
    end

    if taper
      d = z * Math.tan(Math::PI / 180.0 * taper)
      prebias += d - xy
      xy = d
    end

    # determine the "into" material by joining the data of all "into" specs
    # or taking "air" if required.
    if into
      if into.length == 1
        into_data = into[0].data
      else
        into_data = []
        into.each do |i|
          if into_data.length == 0
            into_data = i.data
          else
            into_data = @ep.safe_boolean_to_polygon(i.data, into_data, RBA::EdgeProcessor::mode_or, true, true)
          end
        end
      end
    else
      into_data = @xs.air.data
    end

    # determine the "through" material by joining the data of all "through" specs
    if through
      if through.length == 1
        through_data = through[0].data
      else
        through_data = []
        through.each do |i|
          if through_data.length == 0
            through_data = i.data
          else
            through_data = @ep.safe_boolean_to_polygon(i.data, through_data, RBA::EdgeProcessor::mode_or, true, true)
          end
        end
      end
    end

    # determine the "on" material by joining the data of all "on" specs
    if on
      if on.length == 1
        on_data = on[0].data
      else
        on_data = []
        on.each do |i|
          if on_data.length == 0
            on_data = i.data
          else
            on_data = @ep.safe_boolean_to_polygon(i.data, on_data, RBA::EdgeProcessor::mode_or, true, true)
          end
        end
      end
    end

    pi = (prebias / @xs.dbu + 0.5).floor.to_i
    mp = @ep.size_to_polygon(@mask_polygons, -pi, 0, 2, true, true)
    air_masked = @ep.safe_boolean_to_polygon(@air_polygons, mp, RBA::EdgeProcessor::mode_and, true, true)
    me = (air_masked.empty? ? RBA::Edges::new : RBA::Edges::new(air_masked)) - (mp.empty? ? RBA::Edges::new : RBA::Edges::new(mp))

    # in the "into" case determine the interface region between self and into
    if into || through || on
      if on
        data = on_data
      elsif through
        data = through_data
      else
        data = into_data
      end
      if data.empty?
        me = []
      else
        me &amp;= RBA::Edges::new(data)
      end
    end

    xyi = (xy / @xs.dbu + 0.5).floor.to_i
    zi = (z / @xs.dbu + 0.5).floor.to_i

    d = RBA::Region::new

    if taper &amp;&amp; xyi &gt; 0

      kernel_pts = []
      kernel_pts &lt;&lt; RBA::Point::new(-xyi, 0)
      kernel_pts &lt;&lt; RBA::Point::new(0, zi)
      kernel_pts &lt;&lt; RBA::Point::new(xyi, 0)
      kernel_pts &lt;&lt; RBA::Point::new(0, -zi)

      kp = RBA::Polygon::new(kernel_pts)
      me.each { |e| d.insert(kp.minkowsky_sum(e, false)) }
      d.merge

    elsif xyi &lt;= 0

      # TODO: there is no way to do that with a Minkowsky sum currently
      # since polygons cannot be lines except through dirty tricks
      dz = RBA::Point::new(0, zi)
      me.each { |e| d.insert(RBA::Polygon::new([ e.p1 - dz, e.p2 - dz, e.p2 + dz, e.p1 + dz ])) }
      d.merge

    elsif mode == :round || mode == :octagon

      # approximate round corners by 64 points for "round" and 8 for "octagon"
      n = (mode == :round ? 64 : 8)
      da = 2.0 * Math::PI / n
      rf = 1.0 / Math::cos(da * 0.5)
      kernel_pts = []
      n.times do |i|
        kernel_pts &lt;&lt; RBA::Point::from_dpoint(RBA::DPoint::new(xyi * rf * Math::cos(da * (i + 0.5)), zi * rf * Math::sin(da * (i + 0.5))))
      end

      kp = RBA::Polygon::new(kernel_pts)
      me.each { |e| d.insert(kp.minkowsky_sum(e, false)) }
      d.merge

    elsif mode == :square

      kernel_pts = []
      kernel_pts &lt;&lt; RBA::Point::new(-xyi, -zi)
      kernel_pts &lt;&lt; RBA::Point::new(-xyi, zi)
      kernel_pts &lt;&lt; RBA::Point::new(xyi, zi)
      kernel_pts &lt;&lt; RBA::Point::new(xyi, -zi)

      kp = RBA::Polygon::new(kernel_pts)
      me.each { |e| d.insert(kp.minkowsky_sum(e, false)) }
      d.merge

    end

    if (buried || 0.0).abs &gt; 1e-6
      t = RBA::Trans::new(RBA::Point::new(0, -(buried / @xs.dbu + 0.5).floor.to_i))
      d.transform(t)
    end

    if through
      d -= RBA::Region::new(through_data)
    end

    d &amp;= RBA::Region::new(into_data)

    poly = []
    d.each { |p| poly &lt;&lt; p }
    return poly

  end

end

# MaterialData is pretty identical to LayoutData, but it represents
# a cross section rather than mask data in xy plane
class MaterialData &lt; LayoutData

  def initialize(polygons, xs)
    super(polygons, xs)
  end

  def upcast(polygons)
    MaterialData.new(polygons, @xs)
  end

  def discard
    @xs.air.add(self)
    self
  end

  def keep
    @xs.air.sub(self)
    self
  end

end

# The main class that creates a cross-section file
class XSectionGenerator

  # Constructor
  def initialize(file_path)

    @file_path = file_path
    @lyp_file = nil
    @ep = RBA::EdgeProcessor.new
    @flipped = false

  end

  def layer(layer_spec)
    ld = LayoutData.new([], self)
    ld.load(@layout, @cell, @line_dbu.bbox.enlarge(RBA::Point.new(@extend, @extend)), layer_spec)
    return ld
  end

  # TODO: for debugging only
  def output_raw(layer_spec, d)

    ls = string_to_layerinfo(layer_spec)
    li = @target_layout.layer(ls)
    shapes = @target_layout.cell(@target_cell).shapes(li)
    shapes.insert(d)

  end

  def output(layer_spec, layer_data)

    raise("'output' method: second parameter must be a geometry object") unless layer_data.kind_of?(LayoutData)

    ls = string_to_layerinfo(layer_spec)
    li = @target_layout.layer(ls)
    shapes = @target_layout.cell(@target_cell).shapes(li)

    # confine the shapes to the region of interest
    @ep.boolean_to_polygon([ RBA::Polygon.new(@roi) ], layer_data.data, RBA::EdgeProcessor::mode_and, true, true).each do |polygon|
      shapes.insert(polygon)
    end

  end

  def flip
    @air, @air_below = @air_below, @air
    @flipped = !@flipped
  end

  def all
    return xpoints_to_mask([[ -@extend, 1 ], [ @line_dbu.length + @extend, -1 ]])
  end

  def diffuse(*args)
    all.grow(*args)
  end

  def deposit(*args)
    all.grow(*args)
  end

  def grow(*args)
    all.grow(*args)
  end

  def etch(*args)
    all.etch(*args)
  end

  def mask(layer_data)

    crossing_points = []

    layer_data.data.each do |polygon|

      polygon.each_edge do |edge_dbu|

        if @line_dbu.crossed_by?(edge_dbu) &amp;&amp; (@line_dbu.side_of(edge_dbu.p1) &gt; 0 || @line_dbu.side_of(edge_dbu.p2) &gt; 0)

          # compute the crossing point of "edge" and "line" in database units
          # confine the point to the length of the line
          z = (edge_dbu.dx.to_f * (edge_dbu.p1.y.to_f - @line_dbu.p1.y.to_f) - edge_dbu.dy.to_f * (edge_dbu.p1.x.to_f - @line_dbu.p1.x.to_f)) /
              (edge_dbu.dx.to_f * (@line_dbu.p2.y.to_f - @line_dbu.p1.y.to_f) - edge_dbu.dy.to_f * (@line_dbu.p2.x.to_f - @line_dbu.p1.x.to_f))
          z = (z * @line_dbu.length + 0.5).floor
          if z &lt; -@extend
            z = -@extend
          elsif z &gt; @line_dbu.length + @extend
            z = @line_dbu.length + @extend
          end

          s = ((edge_dbu.dy * @line_dbu.dx - edge_dbu.dx * @line_dbu.dy) &lt;=&gt; 0)

          # store that along with the orientation of the edge (+1: "enter geometry", -1: "leave geometry")
          crossing_points.push([ z, s ])

        end

      end

    end

    # compress the crossing points by collecting all of those which cut the measure line at the
    # same position
    compressed_crossing_points = []
    last_z = nil
    sum_s = 0
    crossing_points.sort.each do |i|

      z = i[0]
      s = i[1]

      if z == last_z
        sum_s += s
      else
        if sum_s != 0
          compressed_crossing_points.push([ last_z, sum_s ])
        end
        last_z = z
        sum_s = s
      end

    end

    if last_z &amp;&amp; sum_s != 0
      compressed_crossing_points.push([ last_z, sum_s ])
    end

    # create the final intervals by selecting those crossing points which
    # denote an entry or leave point into or out of drawn geometry. This
    # basically does a merge of all drawn shapes.

    return xpoints_to_mask(compressed_crossing_points)

  end

  def planarize(*args)

    downto = nil
    less = nil
    to = nil
    into = nil

    args.each do |a|
      if a.kind_of?(Hash)
        a.each_pair do |k,v|
          if k == :downto
            if !v.kind_of?(Array)
              downto = [v]
            else
              downto = v
            end
            downto.each do |i|
              if !i.kind_of?(MaterialData) 
                raise "'#{method}' method: 'into' expects a material parameter or an array of such"
              end
            end
          elsif k == :into
            if !v.kind_of?(Array)
              into = [v]
            else
              into = v
            end
            into.each do |i|
              if !i.kind_of?(MaterialData) 
                raise "'#{method}' method: 'into' expects a material parameter or an array of such"
              end
            end
          elsif k == :less
            less = (0.5 + v.to_f / self.dbu).floor.to_i
          elsif k == :to
            to = (0.5 + v.to_f / self.dbu).floor.to_i
          end
        end
      else
        raise "'planarize' expects named arguments 'less', 'downto', 'into' or 'to'"
      end
    end

    if !into
      raise "'planarize' requires an 'into' argument"
    end

    if downto

      downto_data = nil
      if downto.length == 1
        downto_data = downto[0].data
      else
        downto.each do |i|
          if downto_data.length == 0
            downto_data = i.data
          else
            downto_data = @ep.safe_boolean_to_polygon(i.data, downto_data, RBA::EdgeProcessor::mode_or, true, true)
          end
        end
      end

      # determine upper bound of material
      if downto_data
          downto_data.each do |p|
          yt = p.bbox.top
          yb = p.bbox.bottom
          to ||= yt
          if !@flipped
            to = [ to, yt, yb ].max
          else
            to = [ to, yt, yb ].min
          end
        end
      end

    elsif into &amp;&amp; !to

      # determine upper bound of our material
      into.each do |i|
        i.data.each do |p|
          yt = p.bbox.top
          yb = p.bbox.bottom
          to ||= yt
          if !@flipped
            to = [ to, yt, yb ].max
          else
            to = [ to, yt, yb ].min
          end
        end
      end

    end

    if to
    
      less ||= 0
      
      if @flipped
        removed_box = RBA::Box.new(-@extend, -self.depth_dbu - self.below_dbu, @line_dbu.length + @extend, to + less)
      else
        removed_box = RBA::Box.new(-@extend, to - less, @line_dbu.length + @extend, self.height_dbu)
      end
      
      rem = LayoutData::new([], self)
      into.each do |i|
        rem.add(i.andp([RBA::Polygon.new(removed_box)]))
        i.subp([RBA::Polygon.new(removed_box)])
      end
      
      self.air.add(rem)
     
    end

  end

  def xpoints_to_mask(iv)

    s = 0
    last_s = 0
    p1 = 0
    p2 = 0

    mask_polygons = []
    iv.each do |i|

      z = i[0]
      s += i[1]

      if s &gt; 0 &amp;&amp; last_s &lt;= 0
        p1 = z
      elsif s &lt;= 0 &amp;&amp; last_s &gt; 0
        p2 = z
        mask_polygons.push(RBA::Polygon.new(RBA::Box.new(p1, -@depth - @below, p2, @height)))
      end

      last_s = s

    end

    return MaskData.new(@air.data, mask_polygons, self)

  end

  def delta(x)
    @delta = (x / @dbu + 0.5).floor.to_i
  end

  def delta_dbu
    @delta
  end

  def height(x)
    @height = (x / @dbu + 0.5).floor.to_i
    update_basic_regions
  end

  def height_dbu
    @height
  end

  def depth(x)
    @depth = (x / @dbu + 0.5).floor.to_i
    update_basic_regions
  end

  def depth_dbu
    @depth
  end

  def below(x)
    @below = (x / @dbu + 0.5).floor.to_i
    update_basic_regions
  end

  def below_dbu
    @below
  end

  def extend(x)
    @extend = (x / @dbu + 0.5).floor.to_i
    update_basic_regions
  end

  def extend_dbu
    @extend
  end

  def width_dbu
    @line_dbu.length
  end

  def background
    x1 = @line_dbu.p1.x
    y1 = @line_dbu.p1.y
    x2 = @line_dbu.p2.x
    y2 = @line_dbu.p2.y
    if x2 &lt; x1
      (x1, x2) = [x2, x1]
    end
    if y2 &lt; y1
      (y1, y2) = [y2, y1]
    end
    x1 -= @extend
    y1 -= @extend
    x2 += @extend
    y2 += @extend
    RBA::Box.new(RBA::Point.new(x1 - @delta * 5, y1 - @delta * 5), RBA::Point.new(x2 + @delta * 5, y2 + @delta * 5))
  end

  def air
    @air
  end

  def bulk
    MaterialData.new(@bulk.data, self)
  end

  def dbu
    @dbu
  end

  def layers_file(lyp_file)
    @lyp_file = lyp_file
  end

  # The basic generation method
  def run(p1, p2)

    @target_view = nil

    setup(p1, p2)

    update_basic_regions

    text = nil
    File.open(@file_path) do |file|
      text = file.read
    end
    if !text
      raise("Error reading file #{@file_path}")
    end

    eval(text, binding, @file_path)

    # Show all layers which were created in between
    RBA::Application.instance.main_window.cm_lv_add_missing 
    if @lyp_file
      @target_view.load_layer_props(@lyp_file)
    end
    @target_view.zoom_fit

    @target_view

  end

private

  def update_basic_regions
    @area = RBA::Box.new(-@extend, -@depth - @below, @line_dbu.length + @extend, @height)
    @air = MaterialData.new([RBA::Polygon.new(RBA::Box.new(-@extend, 0, @line_dbu.length + @extend, @height))], self)
    @air_below = MaterialData.new([RBA::Polygon.new(RBA::Box.new(-@extend, -@depth - @below, @line_dbu.length + @extend, -@depth))], self)
    @bulk = MaterialData.new([RBA::Polygon.new(RBA::Box.new(-@extend, -@depth, @line_dbu.length + @extend, 0))], self)
    @roi = RBA::Box.new(0, -@depth - @below, @line_dbu.length, @height)
  end

  def setup(p1, p2)

    # locate the layout and the (single) ruler
    app = RBA::Application.instance
    view = app.main_window.current_view
    if !view
      raise("No view open for creating the cross section from")
    end

    cv = view.cellview(view.active_cellview_index)
    if ! cv.is_valid?
      raise("The selected layout is not valid")
    end

    @cv = cv
    @layout = cv.layout
    @dbu = @layout.dbu
    @cell = cv.cell_index

    # get the start and end points in database units and micron
    p1_dbu = RBA::Point::from_dpoint(p1 * (1.0 / @dbu))
    p2_dbu = RBA::Point::from_dpoint(p2 * (1.0 / @dbu))
    @line_dbu = RBA::Edge.new(p1_dbu, p2_dbu)

    # create a new layout for the output
    cv = app.main_window.create_layout(1)
    cell = cv.layout.add_cell("XSECTION")
    @target_view = app.main_window.current_view
    @target_view.select_cell(cell, 0)
    @target_layout = cv.layout
    @target_layout.dbu = @dbu
    @target_cell = cell

    # initialize height and depth
    @extend = (2.0 / @dbu + 0.5).floor.to_i
    @delta = 10
    @height = (2.0 / @dbu + 0.5).floor.to_i
    @depth = (2.0 / @dbu + 0.5).floor.to_i
    @below = (2.0 / @dbu + 0.5).floor.to_i

    return true

  end

end

# ----------------------------------------------------------------
# A special action to implement the cross section MRU menu item

class XSectionMRUAction &lt; RBA::Action

  def initialize(&amp;action)
    @action = action
  end

  def triggered 
    @action.call(self) 
  end

  def script=(s)
    @script = s
    self.visible = (s != nil)
    if s
      self.title = File.basename(s) 
    end
  end

  def script
    @script
  end

private
  @action
  @script
end

# ----------------------------------------------------------------
# The cross section script environment

class XSectionScriptEnvironment

  def initialize

    app = RBA::Application.instance
    mw = app.main_window

    @action = RBA::Action.new
    @action.title = "XSection Script"
    @action.on_triggered do

      view = RBA::Application.instance.main_window.current_view
      if !view
        raise "No view open for running the xsection script on"
      end
        
      fn = RBA::FileDialog::get_open_file_name("Select Script", "", "XSection Scripts (*.xs);;All Files (*)");
      if fn.has_value?
        run_script(fn.value)
        make_mru(fn.value)
      end

    end

    menu = mw.menu
    menu.insert_separator("tools_menu.end", "xsection_script_group")
    menu.insert_menu("tools_menu.end", "xsection_script_submenu", "XSection Scripts")
    menu.insert_item("tools_menu.xsection_script_submenu.end", "xsection_script_load", @action)
    menu.insert_separator("tools_menu.xsection_script_submenu.end.end", "xsection_script_mru_group")

    @mru_actions = []
    (1..4).each do |i|

      a = XSectionMRUAction.new do |action|
        run_script(action.script)
        make_mru(action.script)
      end

      @mru_actions.push(a)
      menu.insert_item("tools_menu.xsection_script_submenu.end", "xsection_script_mru#{i}", a)

      a.script = nil

    end

    # try to save the MRU list to $HOME/.klayout-processing-mru
    i = 0
    home = ENV["HOME"]
    if $xsection_scripts
      $xsection_scripts.split(":").each_with_index do |script,i|
        if i &lt; @mru_actions.size
          @mru_actions[i].script = script
        end
      end
    elsif home
      fn = File.join(home, ".klayout-xsection")
      begin
        File.open(fn, "r") do |file|
          file.readlines.each do |line|
            if line =~ /&lt;mru&gt;(.*)&lt;\/mru&gt;/
              if i &lt; @mru_actions.size
                @mru_actions[i].script = $1
              end
              i += 1
            end
          end
        end
      rescue
      end

    end

  end

  def run_script(fn, p1 = nil, p2 = nil)

    begin

      if !p1 || !p2

        # locate the layout and the (single) ruler
        app = RBA::Application.instance
        view = app.main_window.current_view
        if !view
          raise("No view open for creating the cross section from")
          return
        end

        ruler = nil
        nrulers = 0
        view.each_annotation do |a|
          ruler = a
          nrulers += 1
        end

        if nrulers == 0
          raise("No ruler present for the cross section line")
        end
        if nrulers &gt; 1
          raise("More than one ruler present for the cross section line")
        end

        p1 = ruler.p1
        p2 = ruler.p2

      end

      XSectionGenerator.new(fn).run(p1, p2)

    # Without this rescue block stack traces are shown (for development)
    rescue =&gt; ex
      
      if $xs_run || $xs_debug
        raise ex
      else

        # Extract the error location in the script.
        # The backtrace line is something like "(filename).xs:(line):in ...".

        location = "(not found)"
        ex.backtrace.each do |bt|
          if !bt.to_s.start_with?(File.dirname(__FILE__))
            location = bt.sub(/:in .*$/, "")
            break
          end
        end

        RBA::MessageBox.critical("Error", ex.to_s + "\nin " + location, RBA::MessageBox.b_ok)
        nil

      end

    end

  end

  def make_mru(script)

    # don't maintain MRU if an external list is provided
    if $xsection_scripts
      return
    end

    scripts = [script]
    @mru_actions.each do |a|
      if a.script != script
        scripts.push(a.script)
      end
    end

    while scripts.size &lt; @mru_actions.size
      scripts.push(nil)
    end

    (0..(@mru_actions.size-1)).each do |i|
      @mru_actions[i].script = scripts[i]
    end

    # try to save the MRU list to $HOME/.klayout-xsection
    home = ENV["HOME"]
    if home
      fn = File.join(home, ".klayout-xsection")
      File.open(fn, "w") do |file|
        file.puts("&lt;xsection&gt;");
        @mru_actions.each do |a|
          if a.script
            file.puts("&lt;mru&gt;#{a.script}&lt;/mru&gt;")
          end
        end
        file.puts("&lt;/xsection&gt;");
      end

    end

  end

end

$xsection_processing_environment = XSectionScriptEnvironment.new

if RBA::LayoutView::current &amp;&amp; $xs_run &amp;&amp; $xs_cut =~ /^(.*),(.*);(.*),(.*)$/ &amp;&amp; $xs_out

  p1 = RBA::DPoint::new($1.to_f, $2.to_f)
  p2 = RBA::DPoint::new($3.to_f, $4.to_f)

  puts("Running XSection script #{$xs_run} with #{p1.to_s} to #{p2.to_s} ..")
  target_view = $xsection_processing_environment.run_script($xs_run, p1, p2)
  puts("Writing #{$xs_out} ..")
  target_view.active_cellview.layout.write($xs_out)

end
</text>
</klayout-macro>
