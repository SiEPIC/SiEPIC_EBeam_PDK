<?xml version="1.0" encoding="utf-8"?>
<klayout-macro>
 <description/>
 <version/>
 <category>pymacros</category>
 <prolog/>
 <epilog/>
 <doc/>
 <autorun>false</autorun>
 <autorun-early>false</autorun-early>
 <priority>0</priority>
 <shortcut/>
 <show-in-menu>false</show-in-menu>
 <group-name/>
 <menu-path/>
 <interpreter>python</interpreter>
 <dsl-interpreter-name/>
 <text>'''
Run a simulation of a contra directional coupler, with specific parameters
Plot the S-parameters
Update the Compact Model Library 

'''

num = 5

from SiEPIC.simulation.contraDC.contra_directional_coupler.ContraDC import *
import plotly.graph_objs as go

# Import PCell parameters from XML; return an array of dict
def import_PCell_parameters(filepath):
    from SiEPIC.utils import get_technology, xml_to_dict
    print('Loading XML from file: %s' % filepath)
    
    with open(filepath, 'r') as file:
        d = xml_to_dict(file.read())
    '''
    print('Found %s PCells' % len(d['PCells']['PCell']))
    for PCell_params in d['PCells']['PCell']:
    print(PCell_params)
    if PCell_params['Name'] == 'Contra-Directional Coupler':
      print('CDC, gap=%s'%PCell_params['gap'])
    '''
    return d



# Export XML file containing all the PCells and their parameters
def export_PCell_parameters(filepath):

  from SiEPIC.utils import select_instances
  import os
  import sys
  from xml.etree.ElementTree import ElementTree, Element, SubElement, Comment, tostring

  lv = pya.Application.instance().main_window().current_view()
  if lv == None:
    raise Exception("No view selected")
  ly = lv.active_cellview().layout()
  if ly == None:
    raise Exception("No active layout")
  cell = lv.active_cellview().cell
  if cell == None:
    raise Exception("No active cell")

  # Get the components and nets for the layout, traversing the entire hierarcy
  components = cell.find_components(verbose=False)

  for c in components:
      print (c.component)

  top = Element('PCells')
  comment = Comment('Generated by SiEPIC-Tools in KLayout')
  top.append(comment)
  count=0
  for c in components:
      print (c)
      print(c.component)
      print (tostring(top))

      if c.cell.is_pcell_variant():
        print(c.component)
        child = SubElement(top, 'PCell')
        child.text = c.basic_name
        child2 = SubElement(child, 'Name')
        child2.text = c.basic_name
        child2 = SubElement(child, 'Component')
        child2.text = c.component
        child2 = SubElement(child, 'ID')
        child2.text = str(count)
        params = c.cell.pcell_parameters_by_name()
        for key in params.keys():
          if sys.version_info[0] == 2:
            types = [bool, int, long]
          else:
            types = [bool, int]
          if type(params[key]) in types:
            child2 = SubElement(child, key)
            child2.text = str(int(params[key]))
          elif type(params[key])==float:
            child2 = SubElement(child, key)
            child2.text = str(round(float(params[key]),14))
          elif type(params[key])==LayerInfo:
            pass
          elif type(params[key])==pya.Point:
            pass
          elif type(params[key])==pya.DPath:
            pass
          elif type(params[key])==list:
            pass
          else:
            child2 = SubElement(child, key)
            child2.text = params[key]
        print ('%s, %s' % (child2.text, type(child2.text)))

      count+=1
  print(top)
  print (tostring(top))
  tree=ElementTree(top)

  print('Saving PCell parameters to file: %s' % filepath)

  tree.write(filepath)
  return filepath


def example():    
    """Example 5: Lumerical-assisted flow
    """
    if num == 5:
    
        apod_shape = "gaussian"
        period = 320e-9
        w1 = 560e-9
        w2 = 440e-9
    
        device = ContraDC(w1= w1, w2=w2, apod_shape=apod_shape, period=period, kappa=25000)
        device.simulate()
    
    
    if (1):
        drop = go.Scatter(x=device.wavelength*1e9, y=device.drop, mode='lines', name='Through')
        thru = go.Scatter(x=device.wavelength*1e9, y=device.thru, mode='lines', name='Drop')
        layout = go.Layout(title='Contra-directional coupler device', xaxis=dict(title='X Axis'), yaxis=dict(title='Y Axis'))
        fig = go.Figure(data=[thru, drop], layout=layout)
        fig.show()
    
    
    # Check if there is a layout open, so we know which technology to install
    lv = pya.Application.instance().main_window().current_view()
    if lv == None:
        raise UserWarning("To save data to the Compact Model Library, first, please create a new layout and select the desired technology:\n  Menu: File &gt; New Layout, and a Technology.\nThen repeat.")
    
    # Get the Technology 
    from SiEPIC.utils import get_layout_variables
    TECHNOLOGY, lv, ly, top_cell = get_layout_variables()
    
    # Check if there is a CML folder in the Technology folder
    import os
    base_path = ly.technology().base_path()    
    folder_CML = os.path.join(base_path,'CML/%s/source_data/contraDC' % ly.technology().name)
    if not os.path.exists(folder_CML):
        raise UserWarning("The folder %s does not exist. \nCannot save to the Compact Model Library." %folder_CML)
    
    # Generate compact model for Lumerical INTERCONNECT
    # return self.path_dat, .dat file that was created
    device.gen_sparams(filepath=folder_CML, make_plot=False) # this will create a ContraDC_sparams.dat file to import into INTC
    
    device.path_dat


#example()

# export_PCell_parameters('/tmp/a.xml')

d = import_PCell_parameters(os.path.join(folder_CML, 'contraDC.xml'))

from SiEPIC.utils import xml_to_dict
d = xml_to_dict(os.path.join(folder_CML, 'contraDC.xml'))

from SiEPIC.utils import xml_to_tree
t = xml_to_tree(os.path.join(folder_CML, 'contraDC.xml'))



def dict_to_xml(filepath):
    '''Load the XML file, and turn into a dictionary
    '''
    from xml.etree import cElementTree as ET
    try:
        e = ET.XML(filepath)
    except:
        raise UserWarning("Error in the XML file.")
    return etree_to_dict(e)


</text>
</klayout-macro>
