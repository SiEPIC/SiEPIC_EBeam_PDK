<?xml version="1.0" encoding="utf-8"?>
<klayout-macro>
 <description>MZI design sweep (EBeam)</description>
 <version/>
 <category>pymacros</category>
 <prolog/>
 <epilog/>
 <doc/>
 <autorun>false</autorun>
 <autorun-early>false</autorun-early>
 <shortcut/>
 <show-in-menu>false</show-in-menu>
 <group-name>Examples_EBeam</group-name>
 <menu-path>siepic_menu.exlayout.begin</menu-path>
 <interpreter>python</interpreter>
 <dsl-interpreter-name/>
 <text>
"""
This file is part of the SiEPIC_EBeam_PDK
by Jaspreet Jhoja (c) 2015

This Python file takes an input for design variations and create a max of 6 TE mode design variations.

uses:
 - the SiEPIC EBeam GDS Library
 - the SiEPIC EBeam PCell Library
it does:
 - deletes everything first
 - takes dL as input and creates compact waveguide designs
 

Version history:
Jaspreet Jhoja          2015/12/01
 - Fix for Layout Warning: Not enough space for the bend radius
 - The dL range has been extended: 70-535um
 - Generates upto 12 TE mode designs
 
Jaspreet Jhoja          2015/11/27
 - Initial version
 - dL range of 70-300um
 - Gennerates upto 6 TE mode designs
"""
# 
# uses:
#  - the SiEPIC EBeam GDS Library
#  - the SiEPIC EBeam PCell Library
# deletes everything first
# works for radius of 5um
# Works for the dL values ranging between 70-535 microns

import pya

#dL values for the designs
dl = [70,  270, 380 ,450, 465,500,400, 500,100,367,200,251]

#validate dL values
for i in dl:
  if(i&lt;70):
    dl.pop(dl.index(i))
  if(i&gt;535):
    dl.pop(dl.index(i))

#waveguide bend radius, changing this will change how many designs will be formed.
wg_bend_radius = 5

#change the waveguide width, default: 500nm or 0.5microns
wg_width = 0.5

'''
Create a new layout using the EBeam technology,
with a top cell
'''
mw = pya.Application().instance().main_window()
ly = mw.create_layout('EBeam', 1).layout()
cell = ly.create_cell('top')
lv = mw.current_view()
lv.select_cell(cell.cell_index(), 0)
dbu = ly.dbu

# Layer mapping:
LayerSi = pya.LayerInfo(1, 0)
LayerSiN = cell.layout().layer(LayerSi)
fpLayer = pya.LayerInfo(99, 0)
fpLayerN = cell.layout().layer(fpLayer)
TextLayer = pya.LayerInfo(10, 0)
TextLayerN = cell.layout().layer(TextLayer)

# Draw floor plan
cell.shapes(fpLayerN).insert(Box(0,0, 605/dbu, 410/dbu))

#coordinates for GC
GC_coord = [0,227]

#Manually request a number of designs
number_of_designs = len(dl)

#space between the designs
space = 100

#1 design for every 33 points
#Decide number of designs per radius

top_cell = cell
cell = cell.layout().create_cell("MZI_TE_Variations")
t = pya.Trans(pya.Trans.R0, 40 * dbu, (12 * dbu))
  # place "cell" in the top cell
top_cell.insert(pya.CellInstArray(cell.cell_index(), t))
  # Grating couplers, P1orts 1, 2, 3, 4 (top-down):
GC_imported = ly.create_cell("ebeam_gc_te1550", "EBeam").cell_index()
print ("Cell: GC_imported: #%s" % GC_imported)
  
#function that draws Grating Coupler
def draw_gc(gc_y_coord, number_of_designs):

  t = pya.Trans(pya.Trans.R0, 0, gc_y_coord*dbu)
  
  cell.insert(pya.CellInstArray(GC_imported, t, pya.Point(0,127*dbu), pya.Point(space*dbu,0), 2, number_of_designs))
  #Ybranch import and setup
  branch_imported = ly.create_cell("ebeam_y_1550", "EBeam").cell_index()
  #splitter ybranch
  cell.insert(pya.CellInstArray(branch_imported, pya.Trans(pya.Trans.R0, 7.5*dbu, (127+gc_y_coord)*dbu), pya.Point(0,127*dbu), pya.Point(space*dbu,0), 1, number_of_designs))
  #joiner ybranch
  cell.insert(pya.CellInstArray(branch_imported, pya.Trans(pya.Trans.R270, ((15+2.75+wg_bend_radius)*dbu), ((gc_y_coord+127+7.5+2.75+wg_bend_radius) * dbu)), pya.Point(0,127*dbu), pya.Point(space*dbu,0), 1, number_of_designs))

  '''
  #function Drawing L1
  #Comment-Del: add 2.75 to go up and 2.75 to attach tp bottom
  points_L1 = [ [15, 127+gc_y_coord+2.75], [wg_bend_radius+15, 127+gc_y_coord+2.75], [wg_bend_radius+15, (127+gc_y_coord+2.75+wg_bend_radius)] ] 
  L1 = layout_waveguide_abs(cell, LayerSi, points_L1, wg_width, wg_bend_radius)
  
  #instantiate the design for other waveguides
  a= pya.CellInstArray(ly.cell_by_name("ROUND_PATH"), pya.Trans(pya.Trans.R0, (space+15)*dbu, (127+gc_y_coord+2.75)*dbu), pya.Point(0,127*dbu), pya.Point(space*dbu,0), 1, number_of_designs-1)
  cell.insert(a)
  '''
  
  #extract coordinates for final attachments to the GC
  pt_f_x = wg_bend_radius+15
  pt_f_y = 127+gc_y_coord+2.75+wg_bend_radius
  
  '''
  #waveguide joining combiner with the output GC  
  points_final = [[pt_f_x+2.75, pt_f_y+15],[pt_f_x +2.75, pt_f_y+16+wg_bend_radius], [pt_f_x +2.75+wg_bend_radius+wg_bend_radius, pt_f_y+16+wg_bend_radius],
  [pt_f_x +2.75+wg_bend_radius+wg_bend_radius, gc_y_coord], [0,gc_y_coord]]
  layout_waveguide_abs(cell, LayerSi, points_final, wg_width, wg_bend_radius)
  
  #instantiate the path for other designs
  a = pya.CellInstArray(ly.cell_by_name("ROUND_PATH$1"), pya.Trans(pya.Trans.R0, (space+pt_f_x+2.75)*dbu, (pt_f_y+15)*dbu), pya.Point(0,127*dbu), pya.Point(space*dbu,0), 1, number_of_designs-1)
  cell.insert(a)
  '''

def drawL2(dL,n, gc_y_coord):
  val = abs(dL-70)
  addvalx = 0 #max canbe held upto 25
  addvaly = 0 #can hold max value of upto 85

  if(dL&lt;120):
    addvalx = (val/2)
  elif(dL&lt;=310):
    addvalx = float(64/2)
    addvaly = float((val-64)/2)
  elif(dL&gt;310 and dL&lt;=380):
    val= val-13
    addvalx = float(64/2)
    addvaly = (val-(128))/2
  elif(dL&gt;380 and dL&lt;=465):
    val= val-2
    addvalx = float(64/2)
    addvaly = (val-(36*6))/2
  elif(dL&gt;465 and dL&lt;535):
    val = val-7
    addvalx = float(64/2)
    addvaly = (val-(36*8))/2
  #print (val,addvalx, addvaly)
  #elif(val&gt;220):
  #  addvalx = 25
   # addvaly = (())

  coordedit = [[[(space*n)+wg_bend_radius+15-10.79341-addvalx, 127+gc_y_coord-2.75-12-10], [(space*n)+wg_bend_radius+15, 127+gc_y_coord-2.75-12-10],
   [(space*n)+wg_bend_radius+15, 127+gc_y_coord-2.75-12-(20)], [(space*n)+wg_bend_radius+15-10.79341-addvalx, 127+gc_y_coord-2.75-12-(20)]],
   
   [[(space*n)+wg_bend_radius+15-10.79341-addvalx, 127+gc_y_coord-2.75-12-30], [(space*n)+wg_bend_radius+15, 127+gc_y_coord-2.75-12-30],
   [(space*n)+wg_bend_radius+15, 127+gc_y_coord-2.75-12-(40)], [(space*n)+wg_bend_radius+15-10.79341-addvalx, 127+gc_y_coord-2.75-12-(40)]],
   
      [[(space*n)+wg_bend_radius+15-10.79341-addvalx, 127+gc_y_coord-2.75-12-50], [(space*n)+wg_bend_radius+15, 127+gc_y_coord-2.75-12-50],
   [(space*n)+wg_bend_radius+15, 127+gc_y_coord-2.75-12-(60)], [(space*n)+wg_bend_radius+15-10.79341-addvalx, 127+gc_y_coord-2.75-12-(60)]]]

  points_L2 = [[15+(space*n), 127+gc_y_coord-2.75],
    [(space*n)+wg_bend_radius+15, 127+gc_y_coord-2.75],
    [(space*n)+wg_bend_radius+15, 127+gc_y_coord-2.75-12],
    [(space*n)+wg_bend_radius+15-10.79341-addvalx, 127+gc_y_coord-2.75-12],
    [(space*n)+wg_bend_radius+15-10.79341-addvalx, 127+gc_y_coord-2.75-18-addvaly-5],
    [(space*n)+wg_bend_radius+20.5, 127+gc_y_coord-2.75-18-addvaly-5], 
    [(space*n)+wg_bend_radius+20.5, 127+gc_y_coord+2.75+wg_bend_radius]]
  if(n&lt;=5 and dL&lt;=310):
    None
  elif(dL&gt;310 and dL&lt;=380):
   # change_coord(10)
    for i in coordedit[0]:
      points_L2.insert(4+(coordedit[0].index(i)),i)
  elif(dL&gt;380 and dL&lt;=465):

    for i in coordedit[0]:
      points_L2.insert(4+(coordedit[0].index(i)),i)

    for i in coordedit[1]:
      points_L2.insert(8+(coordedit[1].index(i)),i)
  
  elif(dL&gt;465 and dL&lt;535):
    for i in coordedit[0]:
      points_L2.insert(4+(coordedit[0].index(i)),i)
    for i in coordedit[1]:
      points_L2.insert(8+(coordedit[1].index(i)),i)
    for i in coordedit[2]:
      points_L2.insert(12+(coordedit[2].index(i)),i)
     # points_L2.pop(7)    
  '''
  print ( points_L2)
  L2 = layout_waveguide_abs(cell, LayerSi, points_L2, wg_width, wg_bend_radius)
  '''
  # Label for automated measurements, laser on Port 2, detectors on Ports 1, 3, 4
  t = pya.Trans(pya.Trans.R0,(space*n)*dbu, gc_y_coord*dbu)
  text = pya.Text ("opt_in_TE_1550_device_MZI"+str(n), t)
  shape = cell.shapes(TextLayerN).insert(text)
  shape.text_size = 3*dbu
#  elif(dL&gt;300)
if (len(dl)&gt;6):
  draw_gc(0,6)
  for i in range(6):
    drawL2(dl[i],i,0)
  remaining_designs = len(dl)-6
  draw_gc(227,remaining_designs)
  for i in range(remaining_designs):
    drawL2(dl[i+6],i,227)  
else:
  draw_gc(0,len(dl))
  for i in range(len(dl)):
    drawL2(dl[i],i)
</text>
</klayout-macro>
