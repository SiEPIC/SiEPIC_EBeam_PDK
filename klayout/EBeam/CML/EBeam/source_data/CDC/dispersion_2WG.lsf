
#
# 2 Waveguide system effective index phase matching condition calculator
#
# Contra-directional coupler Lumerical simulation flow
# see [] for documentation
#
# Author: Mustafa Hammood   ; mustafa@siepic.com   ; mustafa@ece.ubc.ca
# SiEPIC Kits Ltd. 2019     ; University of British Columbia
#

new;
#clear;

ACCURATE = 0;

if (ACCURATE == 1) {
	meshsize = 5e-9; # mesh size
} else {
	meshsize = 50e-9; # mesh size
}


# define waveguides geometry (average widths)
#width_1 = 560e-9;
#width_2 = 440e-9;

#gap = 100e-9;

#slab = 0;	# 1: 90 nm slab ridge waveguides, 0: 220 nm strip waveguides

# define pertrubation periods, to calculate phase matching condition
#period = 320e-9;

# define wavelength sweep ranges
#wavelength=1.5e-6;
#wavelength_stop = 1.6e-6;

# pol = 'TE'

######################## Warning: try to not mess about beyond this point ... ########################
## simulation parameters
thick_Clad = 2.0e-6; 
#thick_Si   = 0.220e-6;
thick_BOX  = 2.0e-6;

#if(slab==1){
#    thick_Slab = 90e-9; 
#}
#else{
#    thick_Slab = 0; 
#}

# define materials
material_Clad = "SiO2 (Glass) - Dispersive & Lossless";
material_BOX  = "SiO2 (Glass) - Dispersive & Lossless";
material_Si   = "Si (Silicon) - Dispersive & Lossless";
materials;     # run script to add materials

# define simulation region
width_margin  = 3e-6;	 # space to include on the side of the waveguide
height_margin = 0.5e-6;  # space to include above and below the waveguide

# calculate simulation volume
# propagation in the x-axis direction; z-axis is wafer-normal
Xmin = -2e-6;  Xmax = 2e-6; # length of the waveguide
Zmin = -height_margin;  Zmax = thick_Si + height_margin;
Y_span = 2*width_margin + (width_1+width_2)/3; Ymin = -Y_span/2;  Ymax = -Ymin;

# draw cladding
addrect; set("name","Clad");  set("material", material_Clad);
set("y", 0);              set("y span", Y_span+1e-6);
set("z min", 0);          set("z max", thick_Clad);
set("x min", Xmin);       set("x max", Xmax);
set("override mesh order from material database",1);
set("mesh order",3);  # similar to "send to back", put the cladding as a background.
set("alpha", 0.2); # set cladding to be transperant.

# draw buried oxide
addrect; set("name", "BOX"); set("material", material_BOX);
set("x min", Xmin);       set("x max", Xmax);
set("z min", -thick_BOX); set("z max", 0);
set("y", 0);              set("y span", Y_span+1e-6);
set("alpha", 0.5);

# draw silicon wafer
addrect; set("name", "Wafer"); set("material", material_Si);
set("x min", Xmin);       set("x max", Xmax);
set("z max", -thick_BOX); set("z min", -thick_BOX-2e-6);
set("y", 0);              set("y span", Y_span+1e-6);
set("alpha", 0.1);

# draw slab silicon layer
addrect; set("name", "slab"); set("material", material_Si);
set("x min", Xmin);       set("x max", Xmax);
set("z max", thick_Slab); set("z min", 0);
set("y", 0);              set("y span", Y_span+1e-6);
set("alpha", 0.1);


# draw waveguide 1
addrect; set("name", "waveguide_1"); set("material",material_Si);
set("y", -gap/2-width_1/2);        set("y span", width_1);
set("z min", 0);    set("z max", thick_Si);
set("x min", Xmin); set("x max", Xmax);

# draw waveguide 2
addrect; set("name", "waveguide_2"); set("material",material_Si);
set("y", gap/2+width_2/2);        set("y span", width_2);
set("z min", 0);    set("z max", thick_Si);
set("x min", Xmin); set("x max", Xmax);


# add 2D mode solver 
addfde; set("solver type","2D X normal");
set("x", 0); set("z", 0.1e-6);
set("y max", Ymin/1.5); set("y min", Ymax/1.5);
set("y", 0); 
set("wavelength", wavelength);
set("define y mesh by","maximum mesh step");
set("dy", meshsize);

if(pol == 'TE'){
    modes = 2; # modes to output (select 1 and 2 for TE)
}else{
    modes = 4; # modes to output (select 3 and 4 for TM)
}
points = 10;
set("number of test modes",modes);
set("number of trial modes",modes);
set("number of points",points);
#set("start wavelength", wavelength);
set("stop wavelength",wavelength_stop);
set("track selected mode",1);

polyfitorder = 1;

# fit resolution
res = 1000;

n_eff = matrix(points, modes);
n_g = matrix(points-1, modes);
n_eff_fit = matrix(polyfitorder+1, modes);
n_g_fit = matrix(polyfitorder+1,modes);
n_eff_data = matrix(res,modes);
n_g_data = matrix(res, modes);



if(pol == 'TM'){
    modes = modes-2;
}
leg = cell(modes+2);

for(i=1:modes) {
    n=findmodes;     # calculate the modes 
    if(pol == 'TE'){    
        selectmode(i);
    }else{
        selectmode(i+2); # skip first 2 TE modes for TM analysis
    }
    frequencysweep;  # run frequency sweep 
    n_eff(:, i) = abs(getdata("frequencysweep","neff"));
    n_g(:,i) = c/abs(getdata("frequencysweep","vg"));
    f=getdata("frequencysweep","f");
    plot(c/f*1e6,n_eff(:,i),"Wavelength (um)", "Effective Index");
    n_eff_fit(:,i) = polyfit(c/f,n_eff(:,i),polyfitorder);
    n_g_fit(:,i) = polyfit(c/f(1:9),n_g(:,i),polyfitorder);
    lambda = c/f;
    lambda_fit = linspace(wavelength,wavelength_stop,res);
    n_eff_data(:,i) = n_eff_fit(1,i)+n_eff_fit(2,i)*lambda_fit;    
    n_g_data(:,i) = n_g_fit(1,i)+n_g_fit(2,i)*lambda_fit;
    leg{i} = "Waveguide "+num2str(i);
    holdon;
}

# export data to matlab data file
#filename = "w1_"+num2str(width_1)+"w2_"+num2str(width_2);
#matlabsave(filename,n_eff_fit,n_g_fit,n_eff,n_g,lambda);

# plot average effective index of the modes
central_mode = 2;	# hi debugger
n_eff_avg_data =  (n_eff_data(:,1)+n_eff_data(:,central_mode))/2;
n_g_avg_data =  (n_g_data(:,1)+n_g_data(:,central_mode))/2;
plot(lambda_fit*1e6, n_eff_avg_data);
leg{modes+1} = "Average effective index";

# find phase matching condition
PhaseMatch = lambda_fit/(2*period);
plot(lambda_fit*1e6, PhaseMatch);
leg{modes+2} = "Grating period: "+num2str(period*1e9) +" nm";
# add legend
legend(leg);

holdoff;

# solve for contra-directional coupling wavelength and self coupling wavelengths
tol = 0.001;

contra_lambda = lambda_fit(find(abs(PhaseMatch -n_eff_avg_data)<tol));
midindex = size(contra_lambda); midindex = midindex(1);
contra_lambda = contra_lambda(midindex);
# group index at contra-directional coupling wavelength (used for kappa analysis)
ng0 = n_g_avg_data(midindex);

self1_lambda = lambda_fit(find(abs(PhaseMatch -n_eff_data(:,1))<tol));
midindex1 = size(self1_lambda); midindex1 = midindex1(1);
self1_lambda = self1_lambda(midindex1);
ng0_self1 = n_g_data(midindex1,1);

self2_lambda = lambda_fit(find(abs(PhaseMatch -n_eff_data(:,central_mode))<tol));
midindex2 = size(self2_lambda); midindex2 = midindex2(1);
self2_lambda = self2_lambda(midindex2);
ng0_self2 = n_g_data(midindex2,central_mode);


?"Contra-directional coupling at: " + num2str(contra_lambda);