<?xml version="1.0" encoding="utf-8"?>
<klayout-macro>
 <description>Path to Waveguide</description>
 <version/>
 <category>pymacros</category>
 <prolog/>
 <epilog/>
 <doc/>
 <autorun>false</autorun>
 <autorun-early>false</autorun-early>
 <shortcut>W</shortcut>
 <show-in-menu>true</show-in-menu>
 <group-name/>
 <menu-path>siepic_menu.waveguides_submenu.begin</menu-path>
 <interpreter>python</interpreter>
 <dsl-interpreter-name/>
 <text># Python script
# SiEPIC_EBeam_Path_to_Waveguide

"""
This file is part of the SiEPIC_EBeam_PDK
by Lukas Chrostowski (c) 2015

This Python file implements the creation of waveguides, 
searches for closest component pins and snaps to them, and 
registers this for future heal operations.


Version history:

Lukas Chrostowski           2015/11/15
 - Initial version
 - Selected paths are first snapped to the nearest pins, then converted to ROUND_PATH waveguides

Lukas Chrostowski           2015/11/16
 - fixes for Path_to_Waveguide ensuring it doesn't snap both waveguide ends to the same pin

Lukas Chrostowski           2015/11/17
 - Bend radius dialog, first time.

Lukas Chrostowski           2015/11/18
 - If the GUIDING_SHAPE (a path) is selected, don't do anything. Already a waveguide.
 - removed need for numpy.array

Lukas Chrostowski           2015/11/xx
 - support for either ROUND_PATH or Waveguide_Route, based on global variable

Lukas Chrostowski           2015/12/04
 - menu to choose between ROUND_PATH or Waveguide_Route

Lukas Chrostowski           2015/12/9
 - .index() is a list method; replaced Optical_*.idx with .idx
 - Convert all Si paths to waveguides if nothing is selected.

Lukas Chrostowski           2016/05/10
 - Snap waveguide only to pins with the same orientation; fixes.

 
"""

import pya
from math import *


# Configure variables to draw structures in the presently selected cell:
lv = pya.Application.instance().main_window().current_view()
if lv == None:
  raise Exception("No view selected")
# Find the currently selected layout.
ly = pya.Application.instance().main_window().current_view().active_cellview().layout() 
if ly == None:
  raise Exception("No layout")
# find the currently selected cell:
cell = pya.Application.instance().main_window().current_view().active_cellview().cell
if cell == None:
  raise Exception("No cell")
# fetch the database parameters
dbu = ly.dbu

# Define layers based on PDK_functions:
LayerSiN = ly.layer(LayerSi)
#LayerTextN = ly.layer(LayerText)
LayerPinRecN = ly.layer(LayerPinRec)
LayerDevRecN = ly.layer(LayerDevRec)
LayerFbrTgtN = ly.layer(LayerFbrTgt)
LayerErrorN = ly.layer(LayerError)

# find all pins

# initialize the arrays to keep track of layout objects
optical_components = []
optical_waveguides = []
optical_pins = []
optical_nets = []
reset_Optical_classes()


# Record a transaction, to enable "undo"
lv.transaction("Path to Waveguide")


# Waveguide type is specified using a "User Properties" defined via the Cells window.
# if missing, a dialog is presented.
Waveguide_Type = cell.property("Waveguide_Type")
if Waveguide_Type and Waveguide_Type in Waveguide_Types:
  print("Waveguide type {%s}, taken from cell {%s}" % (Waveguide_Type, cell.name) )
else:
  Waveguide_Type = pya.InputDialog.ask_item("Waveguide Type", "Choose the type of waveguide to use.  \nThe value will be saved as a user property in cell {%s}." % cell.name, Waveguide_Types, 0)
  print("Waveguide type taken from the InputDialog = %s; for next time, saved in cell {%s}." % (Waveguide_Type, cell.name) )
  cell.set_property("Waveguide_Type", Waveguide_Type)

# Configure the library to use for the waveguide type.
if Waveguide_Type == "ROUND_PATH":
  Waveguide_Lib = "Basic"
elif Waveguide_Type == "Waveguide_Route":
  Waveguide_Lib = "SiEPIC"


# Waveguide radius should be specified in the cell in which the Path_to_Waveguide is called
# using a "User Properties" defined via the Cells window.
# if missing, a dialog is presented.
radius_str = cell.property("radius")  
if radius_str:
  radius = float(radius_str)
  print("Radius taken from cell {%s} = %s" % (cell.name, radius) )
else:
  radius = pya.InputDialog.ask_double_ex("Bend Radius", "Enter the desired bend radius (microns).  \nThe value will be saved as a user property in cell {%s}." % cell.name, 5, 1, 500, 3)
  if radius == None:
    radius = 10
  else:
    print("Radius taken from the InputDialog = %s; for next time, saved in cell {%s}." % (radius, cell.name) )
    cell.set_property("radius", str(radius))
      
# How close must a waveguide be to a pin for it to snap:
waveguide_snap_dist = 10


print("------------------ Path to Waveguide --------------")

# objects to delete:
to_delete = []

# new waveguide objects will become selected after they are added.
new_selection = []

# Find the selected paths
object_selection = lv.object_selection

if object_selection == []:
  print("Nothing selected.  Automatically selecting paths.")
  # find all shapes, in order to find all paths
  iter1 = cell.begin_shapes_rec(LayerSiN)
  i=0
  found_wg = False
  while not(iter1.at_end()):
    i+=1
    if iter1.shape().is_path():
      # This is a path on the silicon layer, to be converted to a waveguide. 
      n = len(object_selection)
      object_selection.append( pya.ObjectInstPath() )
      object_selection[n].layer = LayerSiN
      object_selection[n].shape = iter1.shape()
      object_selection[n].top = cell.cell_index()
      object_selection[n].cv_index = 0 # o.cv_index, lv.active_cellview()
    iter1.next()

  # Select the newly added objects
  lv.object_selection = object_selection


# Search the layout for the components:
print("* calling find_all_components() - DevRec")
find_all_components(cell, LayerDevRecN, LayerPinRecN, LayerFbrTgtN)

for o in object_selection:
  if o.is_cell_inst():
    print("Selected object is a cell, rather than a path.  Please select a path.")
  else:
    print("Selected object is a shape")
    # check if it is a path; check if it is in the present top cell; skip if it is in a subcell.
    if o.shape.is_path() and cell == o.shape.cell:
      c = o.shape.cell
      print(c.basic_name())
      if c.basic_name() == Waveguide_Type and c.is_pcell_variant() and c.pcell_parameters_by_name()['layer'] == LayerSi:
        # we have a waveguide GUIDING_LAYER selected
        print("GUIDING_LAYER in ROUND_PATH on LayerSi. We will not convert this to waveguide!")
      else:
        # this is a path.
        
        shape_obj = o.shape
        path_obj = o.shape.path
        num_points = path_obj.num_points()
        points = path_to_points(path_obj)
        
        #Checks if any segment is less than the radius value
        segment_length = [sqrt((points[i][0]- points[i-1][0])**2 + (points[i][1] - points[i-1][1])**2) for i in range(len(points)) if i&gt;0]
        if(all(each &gt;= radius/dbu for each in segment_length) == False):
          warning_window = QMessageBox()
          warning_window.setText("Warning: One of the segments have insufficient length to accommodate the radius.")
          warning_window.setInformativeText("Do you want to Proceed?")
          warning_window.setStandardButtons(QMessageBox.Yes | QMessageBox.Cancel);
          warning_window.setDefaultButton(QMessageBox.Yes)
          response = warning_window.exec_()        
          if(response == QMessageBox.Cancel):
            try:
                1 / 0
            except ZeroDivisionError as e:
                raise Exception('Check path and try again') from e
        
        print("ORIGINAL PTS",points)
        if num_points == 2:
          # insert two mid-points in the path so that:
          #  1) it can later be split into two nets
          #  2) to allow for waveguide snapping, move an edge, not just endpoint.
          a1 = []
          count =0
          for p in points:
            a1.append (pya.Point(p[0], p[1]))
            count += 1
            if count == 1:
              # add a point:
              a1.append( pya.Point( (points[0][0] + points[1][0])/2, (points[0][1] + points[1][1])/2 )  )
              a1.append( pya.Point( (points[0][0] + points[1][0])/2, (points[0][1] + points[1][1])/2 )  )
          # Update the path
          path_obj = pya.Path(a1, path_obj.width)
          print("updated path (inserted mid-point): %s" % path_obj )
        # Waveguide parameters
        wg_type = 0
        bend_pts = 0
        #length =  path_obj.length()*dbu
        wg_width = path_obj.width*dbu
        # print( "Waveguide:  num_points: %s, length: %s, radius: %s, path: %s"   % (num_points, length, radius, path_obj) )

        # For both the beginning and end of the path:
        for pin in optical_pins:
          pin.dist = []
        for wg_beginning_end in [ 0, 1 ]:
          # check both the beginning and end of the waveguide.
          if wg_beginning_end == 0:
            path_endpoint = points[0]
            path_endpointb = points[1]
          else:
            path_endpoint = points[len(points)-1]
            path_endpointb = points[len(points)-2]
          # Calculate the distance between every pin and each path endpoint
          for pin in optical_pins:
            # check if pin / path segment are in the same orientation
            if pin.pin_type==1: # only snap to component pins.
              angle_pin_path = angle_segments(pin.points,[path_endpoint, path_endpointb])
            else:
              angle_pin_path = -1
            if angle_pin_path == 0 or abs(angle_pin_path) == 180:
              # this updates "optical_pins" via the "pin" pointer  
              # print( "path endpoint: %s, pin %s: %s" % (path_endpoint, pin.n, [pin.x, pin.y] ) )
              pin.dist.append ( distance_xy ( path_endpoint, [pin.x, pin.y] ) ) 
            else:
              # if this pin isn't in the correct direction, mark it as infinitely far away.
              pin.dist.append ( 1e9 ) 

        # Find the closest pin for each path endpoint
        # optical_pins_sorted0[0].dist[0] is the pin distance data sorted in relation to the waveguide beginning:
        optical_pins_sorted0 = sorted(optical_pins, key=lambda  optical_pins0: optical_pins0.dist[0])
        # optical_pins_sorted1[0].dist[1] is the pin distance data sorted in relation to the waveguide end:
        optical_pins_sorted1 = sorted(optical_pins, key=lambda  optical_pins0: optical_pins0.dist[1])
        if len(optical_pins_sorted0) &gt; 0:
          # check if both ends of the waveguide want to snap to the same vertex. If so, pick the closest waveguide end.
          go_wg_beginning = True
          go_wg_end = True
          if optical_pins_sorted0[0].idx == optical_pins_sorted1[0].idx:
            # same pin!  find the closest one: 
            if optical_pins_sorted0[0].dist[0] &lt; optical_pins_sorted1[0].dist[1]:
              # Beginning is closest, don't touch the end
              go_wg_end = False
            else:
              # End is closest, don't touch the beginning
              go_wg_beginning = False
          if optical_pins_sorted0[0].dist[0] &lt; waveguide_snap_dist and go_wg_beginning:
            # Update the path beginning endpoint to match pin
            points = path_to_points(path_obj)
            # Is this a horizontal or vertical segment; move the whole segment
            if points[0][0] == points[1][0]: 
              # Vertical
              points[1][0] = optical_pins_sorted0[0].x
            if points[0][1] == points[1][1]: 
              # Horizontal
              points[1][1] = optical_pins_sorted0[0].y
            points[0] = [optical_pins_sorted0[0].x, optical_pins_sorted0[0].y]
            a1 = []
            for p in points:
              a1.append (pya.Point(p[0], p[1]))
            # Update the path in the layout
            path_obj = pya.Path(a1, path_obj.width)
            print("updated path (adjusted beginning point): %s" % path_obj )
          optical_pins_sorted1[0] # pin that is closest to the end of path
          if optical_pins_sorted1[0].dist[1] &lt; waveguide_snap_dist and go_wg_end:
            # add check for angle of pins.
            # xxxxx
            
            # Update the path end endpoint to match pin
            points = path_to_points(path_obj)
            # Is this a horizontal or vertical segment; move the whole segment
            if points[len(points)-1][0] == points[len(points)-2][0]: 
              # Vertical
              points[len(points)-2][0] = optical_pins_sorted1[0].x
            if points[len(points)-1][1] == points[len(points)-2][1]: 
              # Horizontal
              points[len(points)-2][1] = optical_pins_sorted1[0].y
            points[len(points)-1] = [optical_pins_sorted1[0].x, optical_pins_sorted1[0].y]
            a1 = []
            for p in points:
              a1.append (pya.Point(p[0], p[1]))
            # Update the path in the layout
            path_obj = pya.Path(a1, path_obj.width)
            print("updated path (adjusted end point): %s" % path_obj )

        # Convert the path to a waveguide
        wg_path = points_to_Dpath( points_mult(path_to_points(path_obj),dbu), wg_width)
        param = { "npoints": points_per_circle(radius), "radius": radius, "path": wg_path, "layer": LayerSi }
        pcell = ly.create_cell(Waveguide_Type, Waveguide_Lib, param )
        t = pya.Trans(0, 0)
        new_cell = cell.insert(pya.CellInstArray(pcell.cell_index(), t))
        
        # Leave the newly created waveguide selected, to make it obvious to the user.
        # http://klayout.de/forum/comments.php?DiscussionID=747
        new_selectionN = len(new_selection)
        new_selection.append( pya.ObjectInstPath() )
        new_selection[new_selectionN].top = o.top
        new_selection[new_selectionN].append_path(pya.InstElement.new(new_cell))
      
        # Mark the path for deletion:
        to_delete.append(shape_obj)  

n_deleted = len(to_delete)
for t in to_delete:
  t.delete()
        
# Clear the layout view selection, since we deleted some objects (but others may be selected still):
lv.clear_object_selection()

# Select the newly added objects
lv.object_selection = new_selection

# Record a transaction, to enable "undo"
lv.commit()


if n_deleted == 0:
  v = pya.MessageBox.warning("No path selected", "No path selected.\nPlease select a path. \nIt will get converted to a waveguide.", pya.MessageBox.Ok)

# Save the optical_waveguides for future heal operations
#optical_waveguides_registered = [] # check if this exists...
#optical_waveguides_registered.append(optical_waveguides)
</text>
</klayout-macro>
